<tokens>
  <keyword> class </keyword>
  <identifier> Math </identifier>
  <symbol> { </symbol>
  <keyword> static </keyword>
  <keyword> int </keyword>
  <symbol> [ </symbol>
  <symbol> ] </symbol>
  <identifier> twoToThe </identifier>
  <symbol> ; </symbol>
  <keyword> static </keyword>
  <keyword> int </keyword>
  <symbol> [ </symbol>
  <symbol> ] </symbol>
  <identifier> divideStack </identifier>
  <symbol> ; </symbol>
  <keyword> function </keyword>
  <keyword> void </keyword>
  <identifier> init </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> = </symbol>
  <identifier> new </identifier>
  <keyword> int </keyword>
  <symbol> [ </symbol>
  <integerConstant> 16 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 8 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 16 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 32 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 6 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 64 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 128 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 8 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 256 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 9 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 512 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1024 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 11 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 2048 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 12 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 4096 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 13 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 8192 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 14 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 16384 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <integerConstant> 15 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 32767 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> divideStack </identifier>
  <symbol> = </symbol>
  <identifier> new </identifier>
  <keyword> int </keyword>
  <symbol> [ </symbol>
  <integerConstant> 16 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> boolean </keyword>
  <identifier> bit </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> var </keyword>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> b </identifier>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <symbol> &amp; </symbol>
  <identifier> a </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> == </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <keyword> true </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> int </keyword>
  <identifier> abs </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> &gt;= </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <symbol> - </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> int </keyword>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> var </keyword>
  <keyword> int </keyword>
  <identifier> sum </identifier>
  <symbol> , </symbol>
  <identifier> shiftedX </identifier>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> sum </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> shiftedX </identifier>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 16 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> Math </identifier>
  <symbol> . </symbol>
  <identifier> bit </identifier>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> sum </identifier>
  <symbol> = </symbol>
  <identifier> sum </identifier>
  <symbol> + </symbol>
  <identifier> shiftedX </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> let </keyword>
  <identifier> shiftedX </identifier>
  <symbol> = </symbol>
  <identifier> shiftedX </identifier>
  <symbol> + </symbol>
  <identifier> shiftedX </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> sum </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> int </keyword>
  <identifier> divide </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> var </keyword>
  <keyword> int </keyword>
  <identifier> d </identifier>
  <symbol> , </symbol>
  <identifier> result </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> d </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> d </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> d </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> d </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> d </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> y </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> y </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> &lt;= </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> &gt; </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> let </keyword>
  <identifier> result </identifier>
  <symbol> = </symbol>
  <identifier> Math </identifier>
  <symbol> . </symbol>
  <identifier> divide_positive </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> d </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> result </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <symbol> - </symbol>
  <identifier> result </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> int </keyword>
  <identifier> divide_positive </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> var </keyword>
  <keyword> int </keyword>
  <identifier> q </identifier>
  <symbol> , </symbol>
  <identifier> l </identifier>
  <symbol> , </symbol>
  <identifier> result </identifier>
  <symbol> , </symbol>
  <identifier> rest </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> &gt; </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> let </keyword>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <identifier> y </identifier>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> &amp;&amp; </symbol>
  <identifier> l </identifier>
  <symbol> &lt;= </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> divideStack </identifier>
  <symbol> [ </symbol>
  <identifier> q </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> q </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> let </keyword>
  <identifier> result </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> q </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <identifier> divideStack </identifier>
  <symbol> [ </symbol>
  <identifier> q </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> q </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> q </identifier>
  <symbol> &gt; </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> result </identifier>
  <symbol> = </symbol>
  <identifier> result </identifier>
  <symbol> + </symbol>
  <identifier> result </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> rest </identifier>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <symbol> - </symbol>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> rest </identifier>
  <symbol> &gt;= </symbol>
  <identifier> divideStack </identifier>
  <symbol> [ </symbol>
  <identifier> q </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> result </identifier>
  <symbol> = </symbol>
  <identifier> result </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <identifier> divideStack </identifier>
  <symbol> [ </symbol>
  <identifier> q </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> let </keyword>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> q </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> result </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> int </keyword>
  <identifier> sqrt </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> var </keyword>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> , </symbol>
  <identifier> tt </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> == </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> || </symbol>
  <identifier> x </identifier>
  <symbol> == </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> let </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> y </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> &gt;= </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> t </identifier>
  <symbol> = </symbol>
  <identifier> y </identifier>
  <symbol> + </symbol>
  <identifier> twoToThe </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> t </identifier>
  <symbol> &lt; </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> tt </identifier>
  <symbol> = </symbol>
  <identifier> Math </identifier>
  <symbol> . </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> t </identifier>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> tt </identifier>
  <symbol> == </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> t </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> tt </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> &amp;&amp; </symbol>
  <identifier> tt </identifier>
  <symbol> &lt; </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> y </identifier>
  <symbol> = </symbol>
  <identifier> t </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> let </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> y </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> int </keyword>
  <identifier> mod </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> var </keyword>
  <keyword> int </keyword>
  <identifier> z </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> z </identifier>
  <symbol> = </symbol>
  <identifier> Math </identifier>
  <symbol> . </symbol>
  <identifier> divide </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> x </identifier>
  <symbol> - </symbol>
  <identifier> Math </identifier>
  <symbol> . </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <identifier> z </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> int </keyword>
  <identifier> max </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> &gt;= </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> a </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> b </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> function </keyword>
  <keyword> int </keyword>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> &lt;= </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> a </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> b </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
</tokens>
