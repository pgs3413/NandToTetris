<class>
  <className> Math </className>
  <classVar>
    <varType> static </varType>
    <type> Array[int] </type>
    <name> twoToThe </name>
  </classVar>
  <classVar>
    <varType> static </varType>
    <type> Array[int] </type>
    <name> divideStack </name>
  </classVar>
  <subroutine>
    <subroutineType> function </subroutineType>
    <type> void </type>
    <name> init </name>
    <let>
      <target>
        <identifier> twoToThe </identifier>
      </target>
      <init>
        <newArray>
          <typeName> int </typeName>
          <size>
            <integer> 16 </integer>
          </size>
        </newArray>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 0 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 1 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 1 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 2 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 2 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 4 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 3 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 8 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 4 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 16 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 5 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 32 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 6 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 64 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 7 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 128 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 8 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 256 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 9 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 512 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 10 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 1024 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 11 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 2048 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 12 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 4096 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 13 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 8192 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 14 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <integer> 16384 </integer>
      </init>
    </let>
    <let>
      <target>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <integer> 15 </integer>
          </index>
        </arrayAccess>
      </target>
      <init>
        <binary>
          <op> + </op>
          <expr1>
            <integer> 32767 </integer>
          </expr1>
          <expr2>
            <integer> 1 </integer>
          </expr2>
        </binary>
      </init>
    </let>
    <let>
      <target>
        <identifier> divideStack </identifier>
      </target>
      <init>
        <newArray>
          <typeName> int </typeName>
          <size>
            <integer> 16 </integer>
          </size>
        </newArray>
      </init>
    </let>
    <return>
    </return>
  </subroutine>
  <subroutine>
    <subroutineType> function </subroutineType>
    <type> boolean </type>
    <name> bit </name>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> x </name>
    </classVar>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> j </name>
    </classVar>
    <var>
      <varType> var </varType>
      <type> int </type>
      <name> a </name>
      <name> b </name>
    </var>
    <let>
      <target>
        <identifier> a </identifier>
      </target>
      <init>
        <arrayAccess>
          <name>
            <identifier> twoToThe </identifier>
          </name>
          <index>
            <identifier> j </identifier>
          </index>
        </arrayAccess>
      </init>
    </let>
    <let>
      <target>
        <identifier> b </identifier>
      </target>
      <init>
        <binary>
          <op> &amp; </op>
          <expr1>
            <identifier> x </identifier>
          </expr1>
          <expr2>
            <identifier> a </identifier>
          </expr2>
        </binary>
      </init>
    </let>
    <if>
      <condition>
        <binary>
          <op> == </op>
          <expr1>
            <identifier> b </identifier>
          </expr1>
          <expr2>
            <integer> 0 </integer>
          </expr2>
        </binary>
      </condition>
      <then>
        <return>
          <keyword> false </keyword>
        </return>
      </then>
      <else>
        <return>
          <keyword> true </keyword>
        </return>
      </else>
    </if>
  </subroutine>
  <subroutine>
    <subroutineType> function </subroutineType>
    <type> int </type>
    <name> abs </name>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> x </name>
    </classVar>
    <if>
      <condition>
        <binary>
          <op> &gt;= </op>
          <expr1>
            <identifier> x </identifier>
          </expr1>
          <expr2>
            <integer> 0 </integer>
          </expr2>
        </binary>
      </condition>
      <then>
        <return>
          <identifier> x </identifier>
        </return>
      </then>
      <else>
      </else>
    </if>
    <return>
      <unary>
        <op> - </op>
        <term>
          <identifier> x </identifier>
        </term>
      </unary>
    </return>
  </subroutine>
  <subroutine>
    <subroutineType> function </subroutineType>
    <type> int </type>
    <name> multiply </name>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> x </name>
    </classVar>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> y </name>
    </classVar>
    <var>
      <varType> var </varType>
      <type> int </type>
      <name> sum </name>
      <name> shiftedX </name>
      <name> i </name>
    </var>
    <let>
      <target>
        <identifier> sum </identifier>
      </target>
      <init>
        <integer> 0 </integer>
      </init>
    </let>
    <let>
      <target>
        <identifier> shiftedX </identifier>
      </target>
      <init>
        <identifier> x </identifier>
      </init>
    </let>
    <let>
      <target>
        <identifier> i </identifier>
      </target>
      <init>
        <integer> 0 </integer>
      </init>
    </let>
    <while>
      <condition>
        <binary>
          <op> &lt; </op>
          <expr1>
            <identifier> i </identifier>
          </expr1>
          <expr2>
            <integer> 16 </integer>
          </expr2>
        </binary>
      </condition>
      <body>
        <if>
          <condition>
            <subroutineCall>
              <subroutineName>
                <filedAccess>
                  <own>
                    <identifier> Math </identifier>
                  </own>
                  <name> bit </name>
                </filedAccess>
              </subroutineName>
              <args>
                <identifier> y </identifier>
                <identifier> i </identifier>
              </args>
            </subroutineCall>
          </condition>
          <then>
            <let>
              <target>
                <identifier> sum </identifier>
              </target>
              <init>
                <binary>
                  <op> + </op>
                  <expr1>
                    <identifier> sum </identifier>
                  </expr1>
                  <expr2>
                    <identifier> shiftedX </identifier>
                  </expr2>
                </binary>
              </init>
            </let>
          </then>
          <else>
          </else>
        </if>
        <let>
          <target>
            <identifier> shiftedX </identifier>
          </target>
          <init>
            <binary>
              <op> + </op>
              <expr1>
                <identifier> shiftedX </identifier>
              </expr1>
              <expr2>
                <identifier> shiftedX </identifier>
              </expr2>
            </binary>
          </init>
        </let>
        <let>
          <target>
            <identifier> i </identifier>
          </target>
          <init>
            <binary>
              <op> + </op>
              <expr1>
                <identifier> i </identifier>
              </expr1>
              <expr2>
                <integer> 1 </integer>
              </expr2>
            </binary>
          </init>
        </let>
      </body>
    </while>
    <return>
      <identifier> sum </identifier>
    </return>
  </subroutine>
  <subroutine>
    <subroutineType> function </subroutineType>
    <type> int </type>
    <name> divide </name>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> x </name>
    </classVar>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> y </name>
    </classVar>
    <var>
      <varType> var </varType>
      <type> int </type>
      <name> d </name>
      <name> result </name>
    </var>
    <let>
      <target>
        <identifier> d </identifier>
      </target>
      <init>
        <integer> 1 </integer>
      </init>
    </let>
    <if>
      <condition>
        <binary>
          <op> &lt; </op>
          <expr1>
            <identifier> x </identifier>
          </expr1>
          <expr2>
            <integer> 0 </integer>
          </expr2>
        </binary>
      </condition>
      <then>
        <let>
          <target>
            <identifier> d </identifier>
          </target>
          <init>
            <unary>
              <op> - </op>
              <term>
                <identifier> d </identifier>
              </term>
            </unary>
          </init>
        </let>
        <let>
          <target>
            <identifier> x </identifier>
          </target>
          <init>
            <unary>
              <op> - </op>
              <term>
                <identifier> x </identifier>
              </term>
            </unary>
          </init>
        </let>
      </then>
      <else>
      </else>
    </if>
    <if>
      <condition>
        <binary>
          <op> &lt; </op>
          <expr1>
            <identifier> y </identifier>
          </expr1>
          <expr2>
            <integer> 0 </integer>
          </expr2>
        </binary>
      </condition>
      <then>
        <let>
          <target>
            <identifier> d </identifier>
          </target>
          <init>
            <unary>
              <op> - </op>
              <term>
                <identifier> d </identifier>
              </term>
            </unary>
          </init>
        </let>
        <let>
          <target>
            <identifier> y </identifier>
          </target>
          <init>
            <unary>
              <op> - </op>
              <term>
                <identifier> y </identifier>
              </term>
            </unary>
          </init>
        </let>
      </then>
      <else>
      </else>
    </if>
    <if>
      <condition>
        <binary>
          <op> &lt; </op>
          <expr1>
            <identifier> x </identifier>
          </expr1>
          <expr2>
            <integer> 0 </integer>
          </expr2>
        </binary>
      </condition>
      <then>
        <return>
          <integer> 0 </integer>
        </return>
      </then>
      <else>
      </else>
    </if>
    <if>
      <condition>
        <binary>
          <op> &lt;= </op>
          <expr1>
            <identifier> y </identifier>
          </expr1>
          <expr2>
            <integer> 0 </integer>
          </expr2>
        </binary>
      </condition>
      <then>
        <return>
          <integer> 0 </integer>
        </return>
      </then>
      <else>
      </else>
    </if>
    <if>
      <condition>
        <binary>
          <op> &gt; </op>
          <expr1>
            <identifier> y </identifier>
          </expr1>
          <expr2>
            <identifier> x </identifier>
          </expr2>
        </binary>
      </condition>
      <then>
        <return>
          <integer> 0 </integer>
        </return>
      </then>
      <else>
      </else>
    </if>
    <let>
      <target>
        <identifier> result </identifier>
      </target>
      <init>
        <subroutineCall>
          <subroutineName>
            <filedAccess>
              <own>
                <identifier> Math </identifier>
              </own>
              <name> divide_positive </name>
            </filedAccess>
          </subroutineName>
          <args>
            <identifier> x </identifier>
            <identifier> y </identifier>
          </args>
        </subroutineCall>
      </init>
    </let>
    <if>
      <condition>
        <binary>
          <op> &gt; </op>
          <expr1>
            <identifier> d </identifier>
          </expr1>
          <expr2>
            <integer> 0 </integer>
          </expr2>
        </binary>
      </condition>
      <then>
        <return>
          <identifier> result </identifier>
        </return>
      </then>
      <else>
        <return>
          <unary>
            <op> - </op>
            <term>
              <identifier> result </identifier>
            </term>
          </unary>
        </return>
      </else>
    </if>
  </subroutine>
  <subroutine>
    <subroutineType> function </subroutineType>
    <type> int </type>
    <name> divide_positive </name>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> x </name>
    </classVar>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> y </name>
    </classVar>
    <var>
      <varType> var </varType>
      <type> int </type>
      <name> q </name>
      <name> l </name>
      <name> result </name>
      <name> rest </name>
    </var>
    <if>
      <condition>
        <binary>
          <op> &gt; </op>
          <expr1>
            <identifier> y </identifier>
          </expr1>
          <expr2>
            <identifier> x </identifier>
          </expr2>
        </binary>
      </condition>
      <then>
        <return>
          <integer> 0 </integer>
        </return>
      </then>
      <else>
      </else>
    </if>
    <let>
      <target>
        <identifier> q </identifier>
      </target>
      <init>
        <integer> 0 </integer>
      </init>
    </let>
    <let>
      <target>
        <identifier> l </identifier>
      </target>
      <init>
        <identifier> y </identifier>
      </init>
    </let>
    <while>
      <condition>
        <binary>
          <op> &amp;&amp; </op>
          <expr1>
            <binary>
              <op> &gt; </op>
              <expr1>
                <identifier> l </identifier>
              </expr1>
              <expr2>
                <integer> 0 </integer>
              </expr2>
            </binary>
          </expr1>
          <expr2>
            <binary>
              <op> &lt;= </op>
              <expr1>
                <identifier> l </identifier>
              </expr1>
              <expr2>
                <identifier> x </identifier>
              </expr2>
            </binary>
          </expr2>
        </binary>
      </condition>
      <body>
        <let>
          <target>
            <arrayAccess>
              <name>
                <identifier> divideStack </identifier>
              </name>
              <index>
                <identifier> q </identifier>
              </index>
            </arrayAccess>
          </target>
          <init>
            <identifier> l </identifier>
          </init>
        </let>
        <let>
          <target>
            <identifier> l </identifier>
          </target>
          <init>
            <binary>
              <op> + </op>
              <expr1>
                <identifier> l </identifier>
              </expr1>
              <expr2>
                <identifier> l </identifier>
              </expr2>
            </binary>
          </init>
        </let>
        <let>
          <target>
            <identifier> q </identifier>
          </target>
          <init>
            <binary>
              <op> + </op>
              <expr1>
                <identifier> q </identifier>
              </expr1>
              <expr2>
                <integer> 1 </integer>
              </expr2>
            </binary>
          </init>
        </let>
      </body>
    </while>
    <let>
      <target>
        <identifier> result </identifier>
      </target>
      <init>
        <integer> 1 </integer>
      </init>
    </let>
    <let>
      <target>
        <identifier> q </identifier>
      </target>
      <init>
        <binary>
          <op> - </op>
          <expr1>
            <identifier> q </identifier>
          </expr1>
          <expr2>
            <integer> 1 </integer>
          </expr2>
        </binary>
      </init>
    </let>
    <let>
      <target>
        <identifier> l </identifier>
      </target>
      <init>
        <arrayAccess>
          <name>
            <identifier> divideStack </identifier>
          </name>
          <index>
            <identifier> q </identifier>
          </index>
        </arrayAccess>
      </init>
    </let>
    <let>
      <target>
        <identifier> q </identifier>
      </target>
      <init>
        <binary>
          <op> - </op>
          <expr1>
            <identifier> q </identifier>
          </expr1>
          <expr2>
            <integer> 1 </integer>
          </expr2>
        </binary>
      </init>
    </let>
    <while>
      <condition>
        <binary>
          <op> &gt; </op>
          <expr1>
            <identifier> q </identifier>
          </expr1>
          <expr2>
            <unary>
              <op> - </op>
              <term>
                <integer> 1 </integer>
              </term>
            </unary>
          </expr2>
        </binary>
      </condition>
      <body>
        <let>
          <target>
            <identifier> result </identifier>
          </target>
          <init>
            <binary>
              <op> + </op>
              <expr1>
                <identifier> result </identifier>
              </expr1>
              <expr2>
                <identifier> result </identifier>
              </expr2>
            </binary>
          </init>
        </let>
        <let>
          <target>
            <identifier> rest </identifier>
          </target>
          <init>
            <binary>
              <op> - </op>
              <expr1>
                <identifier> x </identifier>
              </expr1>
              <expr2>
                <identifier> l </identifier>
              </expr2>
            </binary>
          </init>
        </let>
        <if>
          <condition>
            <binary>
              <op> &gt;= </op>
              <expr1>
                <identifier> rest </identifier>
              </expr1>
              <expr2>
                <arrayAccess>
                  <name>
                    <identifier> divideStack </identifier>
                  </name>
                  <index>
                    <identifier> q </identifier>
                  </index>
                </arrayAccess>
              </expr2>
            </binary>
          </condition>
          <then>
            <let>
              <target>
                <identifier> result </identifier>
              </target>
              <init>
                <binary>
                  <op> + </op>
                  <expr1>
                    <identifier> result </identifier>
                  </expr1>
                  <expr2>
                    <integer> 1 </integer>
                  </expr2>
                </binary>
              </init>
            </let>
            <let>
              <target>
                <identifier> l </identifier>
              </target>
              <init>
                <binary>
                  <op> + </op>
                  <expr1>
                    <identifier> l </identifier>
                  </expr1>
                  <expr2>
                    <arrayAccess>
                      <name>
                        <identifier> divideStack </identifier>
                      </name>
                      <index>
                        <identifier> q </identifier>
                      </index>
                    </arrayAccess>
                  </expr2>
                </binary>
              </init>
            </let>
          </then>
          <else>
          </else>
        </if>
        <let>
          <target>
            <identifier> q </identifier>
          </target>
          <init>
            <binary>
              <op> - </op>
              <expr1>
                <identifier> q </identifier>
              </expr1>
              <expr2>
                <integer> 1 </integer>
              </expr2>
            </binary>
          </init>
        </let>
      </body>
    </while>
    <return>
      <identifier> result </identifier>
    </return>
  </subroutine>
  <subroutine>
    <subroutineType> function </subroutineType>
    <type> int </type>
    <name> sqrt </name>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> x </name>
    </classVar>
    <var>
      <varType> var </varType>
      <type> int </type>
      <name> i </name>
      <name> t </name>
      <name> tt </name>
      <name> y </name>
    </var>
    <if>
      <condition>
        <binary>
          <op> || </op>
          <expr1>
            <binary>
              <op> == </op>
              <expr1>
                <identifier> x </identifier>
              </expr1>
              <expr2>
                <integer> 0 </integer>
              </expr2>
            </binary>
          </expr1>
          <expr2>
            <binary>
              <op> == </op>
              <expr1>
                <identifier> x </identifier>
              </expr1>
              <expr2>
                <integer> 1 </integer>
              </expr2>
            </binary>
          </expr2>
        </binary>
      </condition>
      <then>
        <return>
          <identifier> x </identifier>
        </return>
      </then>
      <else>
      </else>
    </if>
    <let>
      <target>
        <identifier> i </identifier>
      </target>
      <init>
        <integer> 7 </integer>
      </init>
    </let>
    <let>
      <target>
        <identifier> y </identifier>
      </target>
      <init>
        <integer> 0 </integer>
      </init>
    </let>
    <while>
      <condition>
        <binary>
          <op> &gt;= </op>
          <expr1>
            <identifier> i </identifier>
          </expr1>
          <expr2>
            <integer> 0 </integer>
          </expr2>
        </binary>
      </condition>
      <body>
        <let>
          <target>
            <identifier> t </identifier>
          </target>
          <init>
            <binary>
              <op> + </op>
              <expr1>
                <identifier> y </identifier>
              </expr1>
              <expr2>
                <arrayAccess>
                  <name>
                    <identifier> twoToThe </identifier>
                  </name>
                  <index>
                    <identifier> i </identifier>
                  </index>
                </arrayAccess>
              </expr2>
            </binary>
          </init>
        </let>
        <if>
          <condition>
            <binary>
              <op> &lt; </op>
              <expr1>
                <identifier> t </identifier>
              </expr1>
              <expr2>
                <identifier> x </identifier>
              </expr2>
            </binary>
          </condition>
          <then>
            <let>
              <target>
                <identifier> tt </identifier>
              </target>
              <init>
                <subroutineCall>
                  <subroutineName>
                    <filedAccess>
                      <own>
                        <identifier> Math </identifier>
                      </own>
                      <name> multiply </name>
                    </filedAccess>
                  </subroutineName>
                  <args>
                    <identifier> t </identifier>
                    <identifier> t </identifier>
                  </args>
                </subroutineCall>
              </init>
            </let>
            <if>
              <condition>
                <binary>
                  <op> == </op>
                  <expr1>
                    <identifier> tt </identifier>
                  </expr1>
                  <expr2>
                    <identifier> x </identifier>
                  </expr2>
                </binary>
              </condition>
              <then>
                <return>
                  <identifier> t </identifier>
                </return>
              </then>
              <else>
              </else>
            </if>
            <if>
              <condition>
                <binary>
                  <op> &amp;&amp; </op>
                  <expr1>
                    <binary>
                      <op> &gt; </op>
                      <expr1>
                        <identifier> tt </identifier>
                      </expr1>
                      <expr2>
                        <integer> 0 </integer>
                      </expr2>
                    </binary>
                  </expr1>
                  <expr2>
                    <binary>
                      <op> &lt; </op>
                      <expr1>
                        <identifier> tt </identifier>
                      </expr1>
                      <expr2>
                        <identifier> x </identifier>
                      </expr2>
                    </binary>
                  </expr2>
                </binary>
              </condition>
              <then>
                <let>
                  <target>
                    <identifier> y </identifier>
                  </target>
                  <init>
                    <identifier> t </identifier>
                  </init>
                </let>
              </then>
              <else>
              </else>
            </if>
          </then>
          <else>
          </else>
        </if>
        <let>
          <target>
            <identifier> i </identifier>
          </target>
          <init>
            <binary>
              <op> - </op>
              <expr1>
                <identifier> i </identifier>
              </expr1>
              <expr2>
                <integer> 1 </integer>
              </expr2>
            </binary>
          </init>
        </let>
      </body>
    </while>
    <return>
      <identifier> y </identifier>
    </return>
  </subroutine>
  <subroutine>
    <subroutineType> function </subroutineType>
    <type> int </type>
    <name> mod </name>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> x </name>
    </classVar>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> y </name>
    </classVar>
    <var>
      <varType> var </varType>
      <type> int </type>
      <name> z </name>
    </var>
    <let>
      <target>
        <identifier> z </identifier>
      </target>
      <init>
        <subroutineCall>
          <subroutineName>
            <filedAccess>
              <own>
                <identifier> Math </identifier>
              </own>
              <name> divide </name>
            </filedAccess>
          </subroutineName>
          <args>
            <identifier> x </identifier>
            <identifier> y </identifier>
          </args>
        </subroutineCall>
      </init>
    </let>
    <return>
      <binary>
        <op> - </op>
        <expr1>
          <identifier> x </identifier>
        </expr1>
        <expr2>
          <subroutineCall>
            <subroutineName>
              <filedAccess>
                <own>
                  <identifier> Math </identifier>
                </own>
                <name> multiply </name>
              </filedAccess>
            </subroutineName>
            <args>
              <identifier> y </identifier>
              <identifier> z </identifier>
            </args>
          </subroutineCall>
        </expr2>
      </binary>
    </return>
  </subroutine>
  <subroutine>
    <subroutineType> function </subroutineType>
    <type> int </type>
    <name> max </name>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> a </name>
    </classVar>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> b </name>
    </classVar>
    <if>
      <condition>
        <binary>
          <op> &gt;= </op>
          <expr1>
            <identifier> a </identifier>
          </expr1>
          <expr2>
            <identifier> b </identifier>
          </expr2>
        </binary>
      </condition>
      <then>
        <return>
          <identifier> a </identifier>
        </return>
      </then>
      <else>
      </else>
    </if>
    <return>
      <identifier> b </identifier>
    </return>
  </subroutine>
  <subroutine>
    <subroutineType> function </subroutineType>
    <type> int </type>
    <name> min </name>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> a </name>
    </classVar>
    <classVar>
      <varType> param </varType>
      <type> int </type>
      <name> b </name>
    </classVar>
    <if>
      <condition>
        <binary>
          <op> &lt;= </op>
          <expr1>
            <identifier> a </identifier>
          </expr1>
          <expr2>
            <identifier> b </identifier>
          </expr2>
        </binary>
      </condition>
      <then>
        <return>
          <identifier> a </identifier>
        </return>
      </then>
      <else>
      </else>
    </if>
    <return>
      <identifier> b </identifier>
    </return>
  </subroutine>
</class>
