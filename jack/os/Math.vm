function Math.init 0
push constant 16
call Memory.alloc 1
pop static 0
push constant 1
push constant 0
push static 0
add
pop pointer 1
pop that 0
push constant 2
push constant 1
push static 0
add
pop pointer 1
pop that 0
push constant 4
push constant 2
push static 0
add
pop pointer 1
pop that 0
push constant 8
push constant 3
push static 0
add
pop pointer 1
pop that 0
push constant 16
push constant 4
push static 0
add
pop pointer 1
pop that 0
push constant 32
push constant 5
push static 0
add
pop pointer 1
pop that 0
push constant 64
push constant 6
push static 0
add
pop pointer 1
pop that 0
push constant 128
push constant 7
push static 0
add
pop pointer 1
pop that 0
push constant 256
push constant 8
push static 0
add
pop pointer 1
pop that 0
push constant 512
push constant 9
push static 0
add
pop pointer 1
pop that 0
push constant 1024
push constant 10
push static 0
add
pop pointer 1
pop that 0
push constant 2048
push constant 11
push static 0
add
pop pointer 1
pop that 0
push constant 4096
push constant 12
push static 0
add
pop pointer 1
pop that 0
push constant 8192
push constant 13
push static 0
add
pop pointer 1
pop that 0
push constant 16384
push constant 14
push static 0
add
pop pointer 1
pop that 0
push constant 32767
push constant 1
add
push constant 15
push static 0
add
pop pointer 1
pop that 0
push constant 16
call Memory.alloc 1
pop static 1
push constant 0
return
function Math.bit 2
push argument 1
push static 0
add
pop pointer 1
push that 0
pop local 0
push argument 0
push local 0
and
pop local 1
push local 1
push constant 0
eq
if-goto IF_TRUE_0
goto IF_FALSE_0
label IF_TRUE_0
push constant 0
return
goto IF_END_0
label IF_FALSE_0
push constant 0
not
return
label IF_END_0
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto IF_TRUE_0
goto IF_FALSE_0
label IF_TRUE_0
push argument 0
return
goto IF_END_0
label IF_FALSE_0
label IF_END_0
push argument 0
neg
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_CONN_0
push local 2
push constant 16
lt
if-goto WHILE_BODY_0
goto WHILE_END_0
label WHILE_BODY_0
push argument 1
push local 2
call Math.bit 2
if-goto IF_TRUE_0
goto IF_FALSE_0
label IF_TRUE_0
push local 0
push local 1
add
pop local 0
goto IF_END_0
label IF_FALSE_0
label IF_END_0
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_CONN_0
label WHILE_END_0
push local 0
return
function Math.divide 2
push constant 1
pop local 0
push argument 0
push constant 0
lt
if-goto IF_TRUE_0
goto IF_FALSE_0
label IF_TRUE_0
push local 0
neg
pop local 0
push argument 0
neg
pop argument 0
goto IF_END_0
label IF_FALSE_0
label IF_END_0
push argument 1
push constant 0
lt
if-goto IF_TRUE_1
goto IF_FALSE_1
label IF_TRUE_1
push local 0
neg
pop local 0
push argument 1
neg
pop argument 1
goto IF_END_1
label IF_FALSE_1
label IF_END_1
push argument 0
push constant 0
gt
not
push argument 1
push constant 0
gt
not
or
push argument 1
push argument 0
gt
or
if-goto IF_TRUE_2
goto IF_FALSE_2
label IF_TRUE_2
push constant 0
return
goto IF_END_2
label IF_FALSE_2
label IF_END_2
push argument 0
push argument 1
call Math.divide_positive 2
pop local 1
push local 0
push constant 0
gt
if-goto IF_TRUE_3
goto IF_FALSE_3
label IF_TRUE_3
push local 1
return
goto IF_END_3
label IF_FALSE_3
push local 1
neg
return
label IF_END_3
function Math.divide_positive 4
push argument 1
push argument 0
gt
if-goto IF_TRUE_0
goto IF_FALSE_0
label IF_TRUE_0
push constant 0
return
goto IF_END_0
label IF_FALSE_0
label IF_END_0
push constant 0
pop local 0
push argument 1
pop local 1
label WHILE_CONN_0
push local 1
push constant 0
gt
push local 1
push argument 0
gt
not
and
if-goto WHILE_BODY_0
goto WHILE_END_0
label WHILE_BODY_0
push local 1
push local 0
push static 1
add
pop pointer 1
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_CONN_0
label WHILE_END_0
push constant 1
pop local 2
push local 0
push constant 1
sub
pop local 0
push local 0
push static 1
add
pop pointer 1
push that 0
pop local 1
push local 0
push constant 1
sub
pop local 0
label WHILE_CONN_1
push local 0
push constant 1
neg
gt
if-goto WHILE_BODY_1
goto WHILE_END_1
label WHILE_BODY_1
push local 2
push local 2
add
pop local 2
push argument 0
push local 1
sub
pop local 3
push local 3
push local 0
push static 1
add
pop pointer 1
push that 0
lt
not
if-goto IF_TRUE_1
goto IF_FALSE_1
label IF_TRUE_1
push local 2
push constant 1
add
pop local 2
push local 1
push local 0
push static 1
add
pop pointer 1
push that 0
add
pop local 1
goto IF_END_1
label IF_FALSE_1
label IF_END_1
push local 0
push constant 1
sub
pop local 0
goto WHILE_CONN_1
label WHILE_END_1
push local 2
return
function Math.sqrt 4
push argument 0
push constant 0
eq
push argument 0
push constant 1
eq
or
if-goto IF_TRUE_0
goto IF_FALSE_0
label IF_TRUE_0
push argument 0
return
goto IF_END_0
label IF_FALSE_0
label IF_END_0
push constant 7
pop local 0
push constant 0
pop local 3
label WHILE_CONN_0
push local 0
push constant 0
lt
not
if-goto WHILE_BODY_0
goto WHILE_END_0
label WHILE_BODY_0
push local 3
push local 0
push static 0
add
pop pointer 1
push that 0
add
pop local 1
push local 1
push argument 0
lt
if-goto IF_TRUE_1
goto IF_FALSE_1
label IF_TRUE_1
push local 1
push local 1
call Math.multiply 2
pop local 2
push local 2
push argument 0
eq
if-goto IF_TRUE_2
goto IF_FALSE_2
label IF_TRUE_2
push local 1
return
goto IF_END_2
label IF_FALSE_2
label IF_END_2
push local 2
push constant 0
gt
push local 2
push argument 0
lt
and
if-goto IF_TRUE_3
goto IF_FALSE_3
label IF_TRUE_3
push local 1
pop local 3
goto IF_END_3
label IF_FALSE_3
label IF_END_3
goto IF_END_1
label IF_FALSE_1
label IF_END_1
push local 0
push constant 1
sub
pop local 0
goto WHILE_CONN_0
label WHILE_END_0
push local 3
return
function Math.mod 1
push argument 0
push argument 1
call Math.divide 2
pop local 0
push argument 0
push argument 1
push local 0
call Math.multiply 2
sub
return
function Math.max 0
push argument 0
push argument 1
lt
not
if-goto IF_TRUE_0
goto IF_FALSE_0
label IF_TRUE_0
push argument 0
return
goto IF_END_0
label IF_FALSE_0
label IF_END_0
push argument 1
return
function Math.min 0
push argument 0
push argument 1
gt
not
if-goto IF_TRUE_0
goto IF_FALSE_0
label IF_TRUE_0
push argument 0
return
goto IF_END_0
label IF_FALSE_0
label IF_END_0
push argument 1
return
