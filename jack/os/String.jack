/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int[] buf;
    field int max;
    field int pos; //next available place

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor(int maxLength){
        if(maxLength < 0){
            let maxLength = 0;
        }
        if(maxLength > 0){
            let buf = new int[maxLength];
        }
        let max = maxLength;
        let pos = 0;
    }

    function String new(int maxLength) {
        return new String(maxLength);
    }

    /** Returns the current length of this string. */
    method int length() {
        return pos;
    }

    /** Returns the character at the j-th location of this string. */
    method int charAt(int j) {
        if(j < 0 || j >= pos){
            return 0;
        }
        return buf[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, int c) {
        if(j < 0 || j >= pos){
            return;
        }
        let buf[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(int c) {
        if(pos < max){
            let buf[pos] = c;
            let pos = pos + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(pos > 0){
            let pos = pos - 1;
        }
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {

        var int num, d, i, c;

        if(pos == 0){
            return 0;
        }

        let num = 0;
        let d = 1;
        let i = 0;

        if(buf[0] == 45){
            let d = -1;
            let i = 1;
        }

        while(i < pos && buf[i] > 47 && buf[i] < 58){
            let c = buf[i] - 48;
            let num = num * 10 + c;
            let i = i + 1;
        }

        if(num == 0){
            return 0;
        }

        if(d < 0){
            let num = -num;
        }

        return num;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let pos = 0;
        if(val == 0){
            do appendChar(48);
            return;
        }
        if(val < 0){
            do appendChar(45);
            let val = -val;
        }
        if(val < 0){
            // val = -32768
            do appendChar(51);
            do appendChar(50);
            do appendChar(55);
            do appendChar(54);
            do appendChar(56);
            return;
        }

        do setInt_positive(val);
        return;

    }

    method void setInt_positive(int val){

        var int c;

        if(val < 10){
            do appendChar(val + 48);
            return;
        }
        do setInt_positive(val / 10);
        let c = Math.mod(val, 10);
        do appendChar(c + 48);
        return;

    }

    /** Returns the new line character. */
    function int newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function int backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function int doubleQuote() {
        return 34;
    }
}