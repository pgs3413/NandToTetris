/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    static Array divideStack;

    /** Initializes the library. */
    function void init() {

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;

        let divideStack = Array.new(16);

        return;

    }

    function boolean bit(int x, int j){

        var int a, b;

        let a = twoToThe[j];
        let b = x & a;
        if(b = 0){
            return false;
        }else {
            return true;
        }

    }

    /** Returns the absolute value of x. */
    function int abs(int x) {

        if(x = 0){
            return 0;
        }

        if(x > 0){
            return x;
        }

        return -x;

    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {

        var int sum, shiftedX, i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while(i < 16){
            if(Math.bit(y, i)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {

        var int d, result;

        let d = 1;
        if(x < 0){
            let d = -d;
            let x = -x;
        }
        if(y < 0){
            let d = -d;
            let y = -y;
        }

        if(x < 0){
            return 0;
        }

        if((y = 0) | (y < 0)){
            return 0;
        }

        if(y > x){
            return 0;
        }

        let result = Math.divide_positive(x, y);

        if(d > 0){
            return result;
        }else {
            return -result;
        }


    }

    function int divide_positive(int x, int y){

        var int q, l, result, rest;

        if(y > x){
            return 0;
        }

        let q = 0;
        let l = y;

        while((l > 0) & (~(l > x))){
            let divideStack[q] = l;
            let l = l + l;
            let q = q + 1;
        }

        let result = 1;
        let q = q - 1;
        let l = divideStack[q];
        let q = q - 1;

        while(q > (-1)){
            let result = result + result;
            let rest = x - l;
            if(~(rest < divideStack[q])){
                let result = result + 1;
                let l = l + divideStack[q];
            }
            let q = q - 1;
        }

        return result;

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {

        var int i, t, tt, y;

        if(x = 0){
            return 0;
        }

        if(x = 1){
            return 1;
        }

        let i = 7;
        let y = 0;

        while(~(i < 0)){
            let t = y + twoToThe[i];
            if(t < x){
                let tt = Math.multiply(t, t);
                if(tt = x){
                    return t;
                }
                if((tt > 0) & (tt < x)){
                    let y = t;
                }
            }
            let i = i - 1;
        }

        return y;
    }

    function int mod(int x, int y){
        var int z;
        let z = Math.divide(x, y);
        return x - Math.multiply(y, z);
    }

    /** Returns the greater number. */
    function int max(int a, int b) {

        if((a > b) | (a = b)){
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {

        if((a < b) | (a = b)){
            return a;
        }

        return b;

    }
}